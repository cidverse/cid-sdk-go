// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	cidsdk "github.com/cidverse/cid-sdk-go"
	mock "github.com/stretchr/testify/mock"
)

// SDKClient is an autogenerated mock type for the SDKClient type
type SDKClient struct {
	mock.Mock
}

// CurrentConfig provides a mock function with given fields:
func (_m *SDKClient) CurrentConfig() (*cidsdk.CurrentConfig, error) {
	ret := _m.Called()

	var r0 *cidsdk.CurrentConfig
	if rf, ok := ret.Get(0).(func() *cidsdk.CurrentConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cidsdk.CurrentConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CurrentModule provides a mock function with given fields:
func (_m *SDKClient) CurrentModule() (*cidsdk.ProjectModule, error) {
	ret := _m.Called()

	var r0 *cidsdk.ProjectModule
	if rf, ok := ret.Get(0).(func() *cidsdk.ProjectModule); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cidsdk.ProjectModule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteCommand provides a mock function with given fields: req
func (_m *SDKClient) ExecuteCommand(req cidsdk.ExecuteCommandRequest) (*cidsdk.ExecuteCommandResponse, error) {
	ret := _m.Called(req)

	var r0 *cidsdk.ExecuteCommandResponse
	if rf, ok := ret.Get(0).(func(cidsdk.ExecuteCommandRequest) *cidsdk.ExecuteCommandResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cidsdk.ExecuteCommandResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(cidsdk.ExecuteCommandRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Health provides a mock function with given fields:
func (_m *SDKClient) Health() (*cidsdk.HealthcheckResponse, error) {
	ret := _m.Called()

	var r0 *cidsdk.HealthcheckResponse
	if rf, ok := ret.Get(0).(func() *cidsdk.HealthcheckResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cidsdk.HealthcheckResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Log provides a mock function with given fields: req
func (_m *SDKClient) Log(req cidsdk.LogMessageRequest) error {
	return nil
}

// Modules provides a mock function with given fields:
func (_m *SDKClient) Modules() ([]cidsdk.ProjectModule, error) {
	ret := _m.Called()

	var r0 []cidsdk.ProjectModule
	if rf, ok := ret.Get(0).(func() []cidsdk.ProjectModule); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cidsdk.ProjectModule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrepareAction provides a mock function with given fields: cfg
func (_m *SDKClient) PrepareAction(cfg interface{}) (cidsdk.ActionEnv, error) {
	ret := _m.Called(cfg)

	var r0 cidsdk.ActionEnv
	if rf, ok := ret.Get(0).(func(interface{}) cidsdk.ActionEnv); ok {
		r0 = rf(cfg)
	} else {
		r0 = ret.Get(0).(cidsdk.ActionEnv)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectEnv provides a mock function with given fields:
func (_m *SDKClient) ProjectEnv() (map[string]string, error) {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VCSCommitByHash provides a mock function with given fields: hash, changes
func (_m *SDKClient) VCSCommitByHash(hash string, changes bool) (*cidsdk.VCSCommit, error) {
	ret := _m.Called(hash, changes)

	var r0 *cidsdk.VCSCommit
	if rf, ok := ret.Get(0).(func(string, bool) *cidsdk.VCSCommit); ok {
		r0 = rf(hash, changes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cidsdk.VCSCommit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(hash, changes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VCSCommits provides a mock function with given fields: changes, limit
func (_m *SDKClient) VCSCommits(changes bool, limit int) ([]cidsdk.VCSCommit, error) {
	ret := _m.Called(changes, limit)

	var r0 []cidsdk.VCSCommit
	if rf, ok := ret.Get(0).(func(bool, int) []cidsdk.VCSCommit); ok {
		r0 = rf(changes, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cidsdk.VCSCommit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool, int) error); ok {
		r1 = rf(changes, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VCSReleases provides a mock function with given fields:
func (_m *SDKClient) VCSReleases() ([]cidsdk.VCSRelease, error) {
	ret := _m.Called()

	var r0 []cidsdk.VCSRelease
	if rf, ok := ret.Get(0).(func() []cidsdk.VCSRelease); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cidsdk.VCSRelease)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VCSTags provides a mock function with given fields:
func (_m *SDKClient) VCSTags() ([]cidsdk.VCSTag, error) {
	ret := _m.Called()

	var r0 []cidsdk.VCSTag
	if rf, ok := ret.Get(0).(func() []cidsdk.VCSTag); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cidsdk.VCSTag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSDKClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewSDKClient creates a new instance of SDKClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSDKClient(t mockConstructorTestingTNewSDKClient) *SDKClient {
	mock := &SDKClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
